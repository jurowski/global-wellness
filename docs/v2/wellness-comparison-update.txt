// Updated portions of components/WellnessComparison.js
import { useState } from 'react';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Radar
} from 'recharts';
import { DATA_SOURCE_TYPE } from '../utils/dataFetching/dataSourceMarker';

// Color palette for different countries (unchanged)
const COUNTRY_COLORS = {
  'USA': '#1f77b4',
  'Finland': '#ff7f0e',
  'Japan': '#2ca02c',
  'Germany': '#d62728',
  'Sweden': '#9467bd',
  'Costa Rica': '#8c564b',
  'New Zealand': '#e377c2',
  'Denmark': '#7f7f7f',
  'Switzerland': '#bcbd22',
  'Canada': '#17becf',
};

// Get a lighter version of a color for hover effects (unchanged)
const getLighterColor = (hex) => {
  const r = parseInt(hex.slice(1, 3), 16);
  const g = parseInt(hex.slice(3, 5), 16);
  const b = parseInt(hex.slice(5, 7), 16);
  return `rgba(${r}, ${g}, ${b}, 0.7)`;
};

export default function WellnessComparison({ data, metrics }) {
  const [chartType, setChartType] = useState('bar'); // 'bar' or 'radar'
  const [showSimulatedData, setShowSimulatedData] = useState(true);
  
  // Function to transform data for the selected chart type
  const getTransformedData = () => {
    if (!data || !data.metrics) return [];
    
    if (chartType === 'bar') {
      // For bar charts, data should be grouped by metric
      return Object.keys(data.metrics).map(metricId => {
        const metric = metrics.find(m => m.id === metricId);
        const metricData = {
          name: metric?.name || metricId,
          ...Object.entries(data.metrics[metricId]).reduce((acc, [country, dataPoint]) => {
            // If hiding simulated data and this is simulated, skip it
            if (!showSimulatedData && 
                dataPoint.source_type && 
                dataPoint.source_type !== DATA_SOURCE_TYPE.REAL) {
              return acc;
            }
            
            // Store the value and source type
            acc[country] = dataPoint.value;
            acc[`${country}_type`] = dataPoint.source_type;
            return acc;
          }, {})
        };
        return metricData;
      });
    } else {
      // For radar charts, data should be grouped by country
      return data.countries.map(country => {
        const countryData = {
          name: country,
          ...Object.keys(data.metrics).reduce((acc, metricId) => {
            if (data.metrics[metricId][country]) {
              const dataPoint = data.metrics[metricId][country];
              
              // If hiding simulated data and this is simulated, skip it
              if (!showSimulatedData && 
                  dataPoint.source_type && 
                  dataPoint.source_type !== DATA_SOURCE_TYPE.REAL) {
                return acc;
              }
              
              const metric = metrics.find(m => m.id === metricId);
              acc[metricId] = dataPoint.value;
              acc[`${metricId}_type`] = dataPoint.source_type;
              acc[`${metricId}_name`] = metric?.name || metricId;
            }
            return acc;
          }, {})
        };
        return countryData;
      });
    }
  };

  const transformedData = getTransformedData();
  
  // Count simulated vs. real data points
  const dataTypeCounts = {
    [DATA_SOURCE_TYPE.REAL]: 0,
    [DATA_SOURCE_TYPE.ESTIMATED]: 0,
    [DATA_SOURCE_TYPE.MOCK]: 0
  };
  
  if (data && data.metrics) {
    Object.values(data.metrics).forEach(metricData => {
      Object.values(metricData).forEach(dataPoint => {
        const sourceType = dataPoint.source_type || DATA_SOURCE_TYPE.MOCK;
        dataTypeCounts[sourceType] += 1;
      });
    });
  }
  
  // Custom tooltip to show metric descriptions and source information
  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      const metricId = chartType === 'bar' 
        ? metrics.find(m => m.name === label)?.id 
        : payload[0].dataKey;
      
      const metricInfo = metrics.find(m => m.id === metricId);
      
      return (
        <div className="bg-white p-4 shadow-lg rounded-lg border border-gray-200">
          <p className="font-bold">{label}</p>
          {payload.map((entry, index) => {
            // Skip metadata fields
            if (entry.dataKey.includes('_type') || entry.dataKey.includes('_name')) {
              return null;
            }
            
            // Find the source type for this data point
            const sourceTypeKey = `${entry.dataKey}_type`;
            const sourceType = payload.find(p => p.dataKey === sourceTypeKey)?.value || DATA_SOURCE_TYPE.MOCK;
            
            return (
              <div key={index} className="flex items-center">
                <div 
                  style={{ backgroundColor: entry.color, width: '12px', height: '12px', marginRight: '6px' }}
                  className="rounded-full flex-shrink-0"
                />
                <p style={{ color: entry.color }}>
                  {entry.name}: {entry.value.toFixed(2)}
                  {sourceType !== DATA_SOURCE_TYPE.REAL && (
                    <span className={`ml-2 text-xs px-1 py-0.5 rounded ${
                      sourceType === DATA_SOURCE_TYPE.ESTIMATED
                        ? 'bg-yellow-100 text-yellow-800'
                        : 'bg-red-100 text-red-800'
                    }`}>
                      {sourceType === DATA_SOURCE_TYPE.ESTIMATED ? 'estimated' : 'simulated'}
                    </span>
                  )}
                </p>
              </div>
            );
          })}
          {metricInfo && (
            <>
              <div className="mt-2 text-sm text-gray-500">{metricInfo.description}</div>
              <div className="mt-1 text-xs text-gray-400">Source: {metricInfo.source}</div>
            </>
          )}
        </div>
      );
    }
    return null;
  };

  if (!data || !data.metrics || !transformedData.length) {
    return (
      <div className="bg-white shadow rounded-lg p-6 mb-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-6">Wellness Metrics Comparison</h2>
        <div className="text-center text-gray-500">
          No data available. Please select countries and metrics to compare.
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white shadow rounded-lg p-6 mb-8">
      <div className="flex flex-col sm:flex-row justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-900">Wellness Metrics Comparison</h2>
        <div className="mt-4 sm:mt-0 flex space-x-4">
          <div className="flex space-x-2 items-center">
            <button
              onClick={() => setChartType('bar')}
              className={`px-4 py-2 rounded-md ${
                chartType === 'bar'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Bar Chart
            </button>
            <button
              onClick={() => setChartType('radar')}
              className={`px-4 py-2 rounded-md ${
                chartType === 'radar'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Radar Chart
            </button>
          </div>
          
          <label className="relative inline-flex items-center cursor-pointer">
            <input 
              type="checkbox" 
              className="sr-only peer" 
              checked={showSimulatedData}
              onChange={() => setShowSimulatedData(!showSimulatedData)}
            />
            <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
            <span className="ml-3 text-sm font-medium text-gray-900">
              {showSimulatedData ? 'Showing' : 'Hiding'} simulated data
            </span>
          </label>
        </div>
      </div>
      
      {(dataTypeCounts[DATA_SOURCE_TYPE.ESTIMATED] > 0 || dataTypeCounts[DATA_SOURCE_TYPE.MOCK] > 0) && (
        <div className="mb-4 p-3 bg-gray-50 rounded-lg border border-gray-200">
          <div className="text-sm text-gray-700 flex flex-wrap gap-3">
            <span className="font-medium">Data source breakdown:</span>
            <span className="flex items-center">
              <span className="inline-block w-3 h-3 bg-green-500 rounded-full mr-1"></span>
              {dataTypeCounts[DATA_SOURCE_TYPE.REAL]} verified 
            </span>
            <span className="flex items-center">
              <span className="inline-block w-3 h-3 bg-yellow-500 rounded-full mr-1"></span>
              {dataTypeCounts[DATA_SOURCE_TYPE.ESTIMATED]} estimated
            </span>
            <span className="flex items-center">
              <span className="inline-block w-3 h-3 bg-red-500 rounded-full mr-1"></span>
              {dataTypeCounts[DATA_SOURCE_TYPE.MOCK]} simulated
            </span>
            <span className="text-xs text-gray-500 ml-auto italic">
              Hover over data points to see source details
            </span>
          </div>
        </div>
      )}

      <div className="h-96">
        <ResponsiveContainer width="100%" height="100%">
          {chartType === 'bar' ? (
            <BarChart data={transformedData} margin={{ top: 20, right: 30, left: 20, bottom: 70 }}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis 
                dataKey="name" 
                angle={-45} 
                textAnchor="end" 
                height={70} 
                tick={{ fontSize: 12 }}
              />
              <YAxis />
              <Tooltip content={<CustomTooltip />} />
              <Legend />
              {data.countries.map((country, index) => (
                <Bar 
                  key={country} 
                  dataKey={country} 
                  fill={COUNTRY_COLORS[country] || `#${Math.floor(Math.random()*16777215).toString(16)}`}
                  activeBar={{ fill: getLighterColor(COUNTRY_COLORS[country] || '#000000') }}
                />
              ))}
            </BarChart>
          ) : (
            <RadarChart outerRadius="80%" data={transformedData}>
              <PolarGrid />
              <PolarAngleAxis dataKey="name" />
              <PolarRadiusAxis />
              <Tooltip content={<CustomTooltip />} />
              <Legend />
              {Object.keys(data.metrics).map((metricId, index) => {
                const metric = metrics.find(m => m.id === metricId);
                return (
                  <Radar 
                    key={metricId} 
                    name={metric?.name || metricId} 
                    dataKey={metricId} 
                    stroke={`#${((1<<24)*Math.random()|0).toString(16)}`} 
                    fill={`#${((1<<24)*Math.random()|0).toString(16)}33`} 
                    fillOpacity={0.6} 
                  />
                );
              })}
            </RadarChart>
          )}
        </ResponsiveContainer>
      </div>
      
      {!showSimulatedData && (dataTypeCounts[DATA_SOURCE_TYPE.ESTIMATED] > 0 || dataTypeCounts[DATA_SOURCE_TYPE.MOCK] > 0) && (
        <div className="mt-4 p-3 bg-yellow-50 rounded-lg border border-yellow-200">
          <p className="text-sm text-yellow-700">
            <span className="font-medium">Note:</span> {dataTypeCounts[DATA_SOURCE_TYPE.ESTIMATED] + dataTypeCounts[DATA_SOURCE_TYPE.MOCK]} data points 
            are currently hidden because they are simulated or estimated. Toggle the switch above to show all data.
          </p>
        </div>
      )}
    </div>
  );
}